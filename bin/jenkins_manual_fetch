#!/usr/bin/env ruby

require 'bundler'
require 'rake'
require 'rubygems/package'
require 'fileutils'
require 'bsw_tech/jenkins_gem/gem_builder'
require 'bsw_tech/jenkins_gem/gem_util'
require 'bsw_tech/jenkins_gem/gem_hpi'
require 'bsw_tech/jenkins_gem/hpi_parser'
require 'zip'
require 'tmpdir'
require 'tempfile'
require 'gemfury'

include BswTech::JenkinsGem::GemUtil

cert_path = File.join(ENV['ENCRYPTED_DIR'], 'gem-public_cert.pem')
private_key_path = File.join(ENV['ENCRYPTED_DIR'], 'gem-private_key.pem')
api_key = ENV['GEMFURY_API_KEY']
raise 'Set the GEMFURY_API_KEY ENV variable' unless api_key
fail 'Set the GEM_CERTIFICATE_PATH ENV variable' unless cert_path && File.exists?(cert_path)
fail 'Set the GEM_PRIVATE_KEY_PATH ENV variable' unless private_key_path && File.exists?(private_key_path)
plugin_name = ARGV[0]
plugin_version = ARGV[1]
fail 'Usage jenkins_manual_fetch <plugin> <version>' unless plugin_name && plugin_version
temp_file = Tempfile.new('.zip')
spec = begin
  url = "https://updates.jenkins.io/download/plugins/#{plugin_name}/#{plugin_version}/#{plugin_name}.hpi"
  puts "Fetching plugin from #{url}"
  body = fetch(url).body
  temp_file.write body
  temp_file.rewind
  hpi_parser = BswTech::JenkinsGem::HpiParser.new temp_file.path
  hpi_parser.gem_spec
ensure
  temp_file.close
  temp_file.unlink
end

puts "Parsed HPI GEM name as #{spec.name} version #{spec.version}"

Dir.mktmpdir 'gem_temp_dir' do |local_temp_path|
  built_gem_path = Dir.chdir(local_temp_path) do
    with_quiet_gem do
      Gem::Package.build spec
    end
  end
  puts 'Wrote Gemspec to file...'
  path = File.join(local_temp_path, built_gem_path)
  gem = Gem::Package.new path
  spec = gem.spec
  hpi_util = BswTech::JenkinsGem::GemHpi.new(path, cert_path, private_key_path)
  unless spec.name.include?(BswTech::JenkinsGem::GemBuilder::JENKINS_CORE_PACKAGE)
    # Files might already be there
    hpi_util.merge_hpi unless spec.files.any?
  end
  unless spec.cert_chain.any?
    puts "Signing gem #{path}"
    hpi_util.sign_gem
  end
  fury_client = Gemfury::Client.new user_api_key: api_key
  existing_versions = begin
    fury_client.versions(spec.name)
  rescue Gemfury::NotFound
    []
  end
  unless existing_versions.find {|listing| listing['version'] == spec.version.to_s}
    puts "Uploading #{path} to Gemfury..."
    fury_client.push_gem File.new(path)
  end
end
