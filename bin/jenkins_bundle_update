#!/usr/bin/env ruby

require 'bsw_tech/jenkins_gem/gem_server'
require 'bsw_tech/jenkins_gem/bundler_copy'
require 'bundler'
require 'rake'
require 'gemfury'

ENV['INDEX_DIRECTORY'] = INDEX_DIRECTORY = 'gem_index'
ENV['GEM_CERTIFICATE_PATH'] = File.join(ENV['ENCRYPTED_DIR'], 'gem-public_cert.pem')
ENV['GEM_PRIVATE_KEY_PATH'] = File.join(ENV['ENCRYPTED_DIR'], 'gem-private_key.pem')
ENV['PLUGIN_DEST_DIR'] = 'plugins_final'

puts 'Starting Rack...'
server_process = fork do
  BswTech::JenkinsGem::GemServer.run!
end

begin
  puts "Removing existing index directory..."
  FileUtils.rm_rf INDEX_DIRECTORY
  puts 'Running bundle update...'
  Bundler.with_unbundled_env do
  policy_not_set = `bundle config trust-policy`.include?('You have not configured a value')
    if policy_not_set
      puts "Setting high security mode since bundle update does not support trust-policy command line switch"
      sh "bundle config trust-policy HighSecurity"
    end
    begin
      sh "GEM_SEED_ENABLED=1 bundle update --conservative #{ARGV.join(' ')}"
    ensure
      sh "bundle config --delete trust-policy" if policy_not_set
    end
  end
ensure
  puts 'Shutting down Rack server'
  Process.kill 'TERM',
                server_process
end
fury_client = Gemfury::Client.new user_api_key: ENV['GEMFURY_API_KEY']
fury_queue = File.new(File.join(ENV['INDEX_DIRECTORY'], 'fury_files.txt'))
fury_queue.each_line do |line|
  path = line.strip
  gem = ::Gem::Package.new path
  spec = gem.spec
  existing_versions = begin
    fury_client.versions(spec.name)
  rescue Gemfury::NotFound
    []
  end
  unless existing_versions.find {|listing| listing['version'] == spec.version.to_s}
    puts "Uploading #{line.strip} to Gemfury..."
    fury_client.push_gem File.new(path)
  end
end

puts 'Running one more time to ensure localhost source is not in Gemfile.lock'
sh 'bundle install --trust-policy HighSecurity'
copy_gems
